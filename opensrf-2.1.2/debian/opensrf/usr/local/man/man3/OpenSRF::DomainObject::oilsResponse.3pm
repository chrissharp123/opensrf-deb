.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenSRF::DomainObject::oilsResponse 3pm"
.TH OpenSRF::DomainObject::oilsResponse 3pm "2013-03-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenSRF::DomainObject::oilsResponse
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse qw/:status/;
.PP
my \f(CW$resp\fR = OpenSRF::DomainObject::oilsResponse\->new;
.PP
\&\f(CW$resp\fR\->status( 'a status message' );
.PP
\&\f(CW$resp\fR\->statusCode( \s-1STATUS_CONTINUE\s0 );
.PP
\&\f(CW$client\fR\->respond( \f(CW$resp\fR );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
OpenSRF::DomainObject::oilsResponse implements the base class for all Application
layer messages send between the client and server.
.SH "NAME"
OpenSRF::DomainObject::oilsException
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something happens.
.PP
\&\f(CW$client\fR\->status( OpenSRF::DomainObject::oilsStatus\->new );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The base class for Status messages sent between client and server.  This
is implemented on top of the \f(CW\*(C`OpenSRF::DomainObject::oilsResponse\*(C'\fR class, and 
sets the default \fBstatus\fR to \f(CW\*(C`Status\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_OK\*(C'\fR.
.SH "NAME"
OpenSRF::DomainObject::oilsConnectStatus
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something happens.
.PP
\&\f(CW$client\fR\->status( new OpenSRF::DomainObject::oilsConnectStatus );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The class for Stati relating to the connection status of a session.  This
is implemented on top of the \f(CW\*(C`OpenSRF::DomainObject::oilsStatus\*(C'\fR class, and 
sets the default \fBstatus\fR to \f(CW\*(C`Connection Successful\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_OK\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOpenSRF::DomainObject::oilsStatus\fR
.SH "NAME"
OpenSRF::DomainObject::oilsContinueStatus
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something happens.
.PP
\&\f(CW$client\fR\->status( new OpenSRF::DomainObject::oilsContinueStatus );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Implements the \s-1STATUS_CONTINUE\s0 message, informing the client that it should
continue to wait for a response to its request.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOpenSRF::DomainObject::oilsStatus\fR
.SH "NAME"
OpenSRF::DomainObject::oilsResult
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
.Vb 1
\& .... do stuff, create $object ...
.Ve
.PP
my \f(CW$res\fR = OpenSRF::DomainObject::oilsResult\->new;
.PP
\&\f(CW$res\fR\->content($object)
.PP
\&\f(CW$session\fR\->respond( \f(CW$res\fR );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This is the base class for encapuslating \s-1RESULT\s0 messages send from the server
to a client.  It is a subclass of \fBOpenSRF::DomainObject::oilsResponse\fR, and
sets \fBstatus\fR to \f(CW\*(C`OK\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_OK\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SS "OpenSRF::DomainObject::oilsMessage\->content( [$new_content] )"
.IX Subsection "OpenSRF::DomainObject::oilsMessage->content( [$new_content] )"
.RS 4
Sets or gets the content of the response.  This should be exactly one object
of (sub)type domainObject or domainObjectCollection.
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOpenSRF::DomainObject::oilsResponse\fR
.SH "NAME"
OpenSRF::DomainObject::oilsException
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something breaks.
.PP
\&\f(CW$client\fR\->send( '\s-1ERROR\s0', OpenSRF::DomainObject::oilsException\->new( status => \*(L"\s-1ARRRRRRG\s0!\*(R" ) );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The base class for Exception messages sent between client and server.  This
is implemented on top of the \f(CW\*(C`OpenSRF::DomainObject::oilsResponse\*(C'\fR class, and 
sets the default \fBstatus\fR to \f(CW\*(C`Exception occurred\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_BADREQUEST\*(C'\fR.
.SH "NAME"
OpenSRF::DomainObject::oilsConnectException
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something breaks while connecting.
.PP
\&\f(CW$client\fR\->send( '\s-1ERROR\s0', new OpenSRF::DomainObject::oilsConnectException );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The class for Exceptions that occur durring the \fB\s-1CONNECT\s0\fR phase of a session.  This
is implemented on top of the \f(CW\*(C`OpenSRF::DomainObject::oilsException\*(C'\fR class, and 
sets the default \fBstatus\fR to \f(CW\*(C`Connect Request Failed\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_FORBIDDEN\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOpenSRF::DomainObject::oilsException\fR
.SH "NAME"
OpenSRF::DomainObject::oilsMethodException
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use OpenSRF::DomainObject::oilsResponse;
.PP
\&...
.PP
# something breaks while looking up or starting
# a method call.
.PP
\&\f(CW$client\fR\->send( '\s-1ERROR\s0', new OpenSRF::DomainObject::oilsMethodException );
.SH "ABSTRACT"
.IX Header "ABSTRACT"
The class for Exceptions that occur during the \fB\s-1CONNECT\s0\fR phase of a session.  This
is implemented on top of the \f(CW\*(C`OpenSRF::DomainObject::oilsException\*(C'\fR class, and 
sets the default \fBstatus\fR to \f(CW\*(C`Connect Request Failed\*(C'\fR and \fBstatusCode\fR to \f(CW\*(C`STATUS_NOTFOUND\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBOpenSRF::DomainObject::oilsException\fR
