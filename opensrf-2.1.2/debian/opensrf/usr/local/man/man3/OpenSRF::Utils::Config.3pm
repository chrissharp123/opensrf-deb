.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "OpenSRF::Utils::Config 3pm"
.TH OpenSRF::Utils::Config 3pm "2013-03-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
OpenSRF::Utils::Config
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use OpenSRF::Utils::Config;
\&
\&  my $config_obj = OpenSRF::Utils::Config\->load( config_file   => \*(Aq/config/file.cnf\*(Aq );
\&
\&  my $attrs_href = $config_obj\->bootstrap();
\&
\&  $config_obj\->bootstrap\->loglevel(0);
\&
\&  open FH, \*(Aq>\*(Aq.$config_obj\->FILE() . \*(Aq.new\*(Aq;
\&  print FH $config_obj;
\&  close FH;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is mainly used by other OpenSRF modules to load an OpenSRF
configuration file.  OpenSRF configuration files are \s-1XML\s0 files that
contain a \f(CW\*(C`<config>\*(C'\fR root element and an \f(CW\*(C`<opensrf>\*(C'\fR child
element (in XPath notation, \f(CW\*(C`/config/opensrf/\*(C'\fR). Each child element
is converted into a hash key=>value pair. Elements that contain other
\&\s-1XML\s0 elements are pushed into arrays and added as an array reference to
the hash. Scalar values have whitespace trimmed from the left and
right sides.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Given an OpenSRF configuration file named \fIopensrf_core.xml\fR with the
following content:
.PP
.Vb 4
\&  <?xml version=\*(Aq1.0\*(Aq?>
\&  <config>
\&    <opensrf>
\&      <router_name>router</router_name>
\&
\&      <routers> 
\&        <router>localhost</router>
\&        <router>otherhost</router>
\&      </routers>
\&
\&      <logfile>/var/log/osrfsys.log</logfile>
\&    </opensrf>
\&  </config>
.Ve
.PP
\&... calling \f(CW\*(C`OpenSRF::Utils::Config\->load(config_file =>
\&\*(Aqopensrf_core.xml\*(Aq)\*(C'\fR will create a hash with the following
structure:
.PP
.Vb 5
\&  {
\&    router_name => \*(Aqrouter\*(Aq,
\&    routers => [\*(Aqlocalhost\*(Aq, \*(Aqotherhost\*(Aq],
\&    logfile => \*(Aq/var/log/osrfsys.log\*(Aq
\&  }
.Ve
.PP
You can retrieve any of these values by name from the bootstrap
section of \f(CW$config_obj\fR; for example:
.PP
.Vb 1
\&  $config_obj\->bootstrap\->router_name
.Ve
.SH "NOTES"
.IX Header "NOTES"
For compatibility with previous versions of the OpenSRF configuration
files, the \f(CW\*(C`load()\*(C'\fR method by default loads the \f(CW\*(C`/config/opensrf\*(C'\fR
section with the hardcoded name of \fBbootstrap\fR.
.PP
However, it is possible to load child elements of \f(CW\*(C`<config>\*(C'\fR other
than \f(CW\*(C`<opensrf>\*(C'\fR by supplying a \f(CW\*(C`base_path\*(C'\fR argument which specifies
the node you wish to begin loading from (in XPath notation). Doing so
will also replace the hardcoded \f(CW\*(C`bootstrap\*(C'\fR name with the node name of
the last member of the given path.  For example:
.PP
.Vb 4
\&  my $config_obj = OpenSRF::Utils::Config\->load(
\&      config_file => \*(Aq/config/file.cnf\*(Aq
\&      base_path => \*(Aq/config/shared\*(Aq
\&  );
\&
\&  my $attrs_href = $config_obj\->shared();
.Ve
.PP
While it may be possible to load the entire file in this fashion (by
specifying an empty \f(CW\*(C`base_path\*(C'\fR), doing so will break compatibility with
existing code which expects to find a \f(CW\*(C`bootstrap\*(C'\fR member. Future
iterations of this module may extend its ability to parse the entire
OpenSRF configuration file in one pass while providing multiple base
sections named after the sibling elements of \f(CW\*(C`/config/opensrf\*(C'\fR.
.PP
Hashrefs of sections can be returned by calling a method of the object
of the same name as the section.  They can be set by passing a hashref
back to the same method.  Sections will \fB\s-1NOT\s0\fR be autovivicated,
though.
.SH "METHODS"
.IX Header "METHODS"
.SS "OpenSRF::Utils::Config\->load( config_file => '/some/config/file.cnf' )"
.IX Subsection "OpenSRF::Utils::Config->load( config_file => '/some/config/file.cnf' )"
Returns a OpenSRF::Utils::Config object representing the config file
that was loaded.  The most recently loaded config file (hopefully the
only one per app) is stored at \f(CW$OpenSRF::Utils::ConfigCache\fR. Use
\&\fIOpenSRF::Utils::Config::current()\fR to get at it.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&        OpenSRF::Utils
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Elements containing heterogeneous child elements are treated as though they have the same element name;
for example:
  <routers>
    <router>localhost</router>
    <furniture>chair</furniture>
  </routers>
.PP
\&... will simply generate a key=>value pair of \f(CW\*(C`routers => [\*(Aqlocalhost\*(Aq, \*(Aqchair\*(Aq]\*(C'\fR.
.SH "BUGS"
.IX Header "BUGS"
No known bugs, but report any to open\-ils\-dev@list.georgialibraries.org or mrylander@gmail.com.
.SH "COPYRIGHT AND LICENSING"
.IX Header "COPYRIGHT AND LICENSING"
Copyright (C) 2000\-2007, Mike Rylander
Copyright (C) 2007, Laurentian University, Dan Scott <dscott@laurentian.ca>
.PP
The OpenSRF::Utils::Config module is free software. You may distribute under the terms
of the \s-1GNU\s0 General Public License version 2 or greater.
